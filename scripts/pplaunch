#!/usr/bin/env python
# -*- coding: utf-8 -*-
# =============================================================================
## @file pplaunch
#  Helper script to launch pp-server on remote hosts
#   - builds ssh tunnel
#   - sets the remote environment
#   - starts the remote pp-server 
#  @author Vanya BELYAEV Ivan.Belyaev@itep.ru
#  @date   2011-06-07
# =============================================================================
from __future__ import print_function 
# =============================================================================
"""Helper script to launch pp-server on remote host.
It builds the SSH   tunnel to remote host, setup the environment
and finally launch pp-server on remote host
"""
# =============================================================================
__all__ = () 
# =============================================================================
## create the argument parser 
def make_parser () :
    """Create the argument parser
    """
    from argparse import ArgumentParser 
    parser = ArgumentParser ( prog = 'pplaunch' ,
                              description = __doc__ )
    
    group1 = parser.add_mutually_exclusive_group()    
    group1.add_argument ( 
        "-q" , "--quiet"       ,
        dest    = 'Quiet'      , 
        action  = 'store_true' ,
        help    = "Quite processing [default: %(default)s]" ,
        )
    
    group1.add_argument ( 
        "--verbose"     ,
        dest    = 'Verbose'    , 
        action  = 'store_true' ,
        help    = "Verbose processing [default: %(default)s]" ,
        )
    
    group2  = parser.add_argument_group ( "Configurtaion" )
    group2.add_argument (
        "-c" , "--config"  ,
        dest    = 'Config' ,
        type    =  str     , 
        help    = 'Configuration script to be transferred to remote host and sourced',
        )
    
    group2.add_argument (
        "-p" , "--profile"  ,
        dest    = 'Profile' ,
        type    =  str     , 
        help    = 'Remote script to be sourced',
        )
    
    parser.add_argument (
        "-s" , "--secret" ,
        dest    = 'Secret' ,
        type    =  str     , 
        help    = 'Secret password used for connection' ,
        )

    parser.add_argument (
        "-t" , "--timeout"  ,
        dest    = 'Timeout' ,
        type    =  int      , 
        help    = 'Timeout for SSH connection [default: %(default)s]' ,
        default = 7200 
        )
    
    parser.add_argument (
        "remotes" ,
        metavar = 'Remotes' ,
        nargs   = '+'       , 
        help    = "Remote hosts [*/auto/config] -> take from ostap-configuration" )
    
    return parser 

if '__main__' == __name__ :
    
    # =============================================================================
    from ostap.logger.logger import getLogger
    logger = getLogger ( 'pplaunch' )
    # =============================================================================
    
    parser = make_parser() 
    
    import sys, os 
    args = sys.argv[1:]
    
    config = parser.parse_args ( args )
    logger.debug ( 'Configuration:%s ' % config) 


    remotes = config.remotes 
    if 1 == len ( remotes ) :
        rems = remotes [ 0 ]
        rems = rems.lower()
        if rems in ( 'config' , '*' , 'auto' ) :
            from ostap.parallel.utils import get_ppservers
            import socket
            local_host = socket.getfqdn ().lower()  
            remotes = get_ppservers ( local_host )
            assert remotes, 'No remotes are extracted from configuration'

    remotes = tuple ( remotes )
    if config.Verbose :
        logger.info ( "List of remote hosts: %s" % list ( remotes ) )
                      
    ## check alive remote hosts 
    from ostap.parallel.utils import good_pings 
    alive     = good_pings ( *remotes )
    if len ( alive ) != len ( remotes ) :
        dead = list ( set ( remotes ) - set ( alive ) )
        logger.warning ("Dead remote hosts: %s" % dead ) 
        remotes = tuple ( alive ) 

    assert remotes, 'No valid remote hosts are defined!'
    if config.Verbose :
        logger.info ( "List of good remote hosts: %s" % list ( remotes ) )
    
    kwargs  = {}
    
    if config.Config :
        assert os.path.exist  ( config.Config ) and \
               os.path.isfile ( config.Config ), \
               "Non exsicting config scrips %s is specifid " % config.Config

        kwargs [ 'script' ] = config.Script
        if config.Verbose :
            logger.info ( "Configurtaion script: %s" % config.Script )
        
    if config.Profile :
        kwargs [ 'profile' ] = config.Profile
        if config.Verbose :
            logger.info ( "Configurtaion script: %s" % config.Script )
            
    if not config.Secret is None :
        kwargs [ 'secret' ] = config.Secret
        if config.Verbose :
            logger.info ( "Secret: %s" % config.Secret )

    if config.Timeout and 0 < config.Timeout :
        kwargs [ 'timeout' ] = config.Timeout
        if config.Verbose :
            logger.info ( "Timeout: %s" % config.Timeout )
            
    kwargs [ 'silent' ] = config.Quiet
    if config.Verbose : logger.info ( "Kwrgs: %s" % kwargs  )
    
    from ostap.parallel.pptunnel import ppServer
    
    ppservers = []

    if config.Verbose : 
        from ostap.logger.utils import logVerbose as Context 
    else :
        from ostap.logger.utils import NoContext  as Context 
        
    if 3 <= sys.version_info.major :

        from contextlib              import ExitStack
        with Context() , ExitStack() as stack :
            for remote in remotes : 
                ppsvc = ppServer ( remote , **kwargs )
                stack.enter_context ( ppsvc ) 
                ppservers.append ( ppsvc )
            input (" Press any key to stop " )
            
    else :

        with Context() : 
            ppservers = [ ppServer ( remote , **kwargs ) for remote in remotes ]
            raw_input (" Press any key to stop " )            
            while ppservers : ppservers.pop() 

# =============================================================================
##                                                                      The END 
# =============================================================================
