// ============================================================================
#ifndef SYNCEDCACHE_H 
#define SYNCEDCACHE_H 1
// ============================================================================
// Include files
// ============================================================================
// STD&STL
// ============================================================================
#include <mutex>
// ============================================================================
namespace 
{
  // ==========================================================================
  /** @class SyncedCache syncedcache.h
   *  @author Vanya Belyaev
   *  @date   2018-09-21
   */
  template <class CONTAINER, class MUTEX = std::mutex>
  class SyncedCache 
  {
  public:
    // =========================================================================
    typedef CONTAINER              Container ;
    typedef MUTEX                  Mutex     ;
    typedef std::lock_guard<Mutex> Lock      ;
    // =========================================================================
  public: 
    // =========================================================================
    /// Standard constructor
    template <typename... Args>
    SyncedCache(Args&&... args) 
      : m_cnt   { std::forward<Args>(args)... } 
      , m_mutex {}
    {} ;
    // ========================================================================
  public:
    // ========================================================================
    inline         Container& container()       { return  m_cnt ; }
    inline   const Container& container() const { return  m_cnt ; }
    // ========================================================================
  public:
    // ========================================================================
    operator       Container&          ()       { return  m_cnt ; }
    operator const Container&          () const { return  m_cnt ; }
    // ========================================================================
  public:
    // ========================================================================
    inline       Container* operator-> ()       { return &m_cnt ; }
    inline const Container* operator-> () const { return &m_cnt ; }
    // ========================================================================
  public:
    // ========================================================================
    Mutex& mutex() const { return m_mutex ; }
    // ========================================================================
  private:
    // ========================================================================
    Container     m_cnt   ;
    mutable Mutex m_mutex ;
    // ========================================================================
  };
  // ==========================================================================
} //                                             The end of anonymous namespace 
// ============================================================================
//                                                                      The END  
// ============================================================================
#endif // SYNCEDCACHE_H
// ============================================================================
